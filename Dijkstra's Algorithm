# shortest path-- Dijkstra's Algorithm

from collections import defaultdict

class Graph:
    def __init__(self):
        self.adjlist = defaultdict(list)
        self.vertex = []

    @staticmethod
    def test_path():
        g = Graph()
        g.add_vertex('CA')
        g.add_vertex('NY')
        g.add_vertex('TX')
        g.add_vertex('OK')
        g.add_vertex('MO')
        g.add_vertex('WI')
        g.add_edge('CA', 'NY', 17)
        g.add_edge('CA', 'TX', 10)
        g.add_edge('CA', 'OK', 7)
        g.add_edge('NY', 'TX', 8)
        g.add_edge('NY', 'OK', 7)
        g.add_edge('TX', 'OK', 2)
        g.add_edge('OK', 'MO', 3)
        g.add_edge('MO', 'WI', 2)

        g.shortestPath('CA', 'WI')
        g.shortestPath('MO', 'OK')

        assert g.shortestPath("CA", "WI") == ['CA', 'OK', 'MO', 'WI'], "Wrong path"
        assert g.shortestPath('MO', 'OK') == float('inf'), "There isn't a path"

    def add_vertex(self, v):
        self.vertex.append(v)

    def add_edge(self, v1, v2, weight):
        node = [v2, weight]
        self.adjlist[v1].append(node)

    def shortestPath(self, source, dest):
        distance = {}
        for v in self.vertex:
            distance[v] = float('inf')
        distance[source] = 0

        previous = defaultdict(list)
        visited = []
        next_nodes = {}
        for v, d in distance.items():
            next_nodes[v] = d

        while next_nodes:
            curr_node = min(next_nodes, key = lambda k: next_nodes[k])
            del next_nodes[curr_node]
            visited.append(curr_node)

            for neighbor in self.adjlist[curr_node]:
                if neighbor[0] not in visited:
                    new_distance = neighbor[1] + distance[curr_node]
                    if new_distance < distance[neighbor[0]]:
                        distance[neighbor[0]] = new_distance
                        next_nodes[neighbor[0]] = new_distance
                        for x in previous[curr_node]:
                            previous[neighbor[0]].append(x)
                        previous[neighbor[0]].append(curr_node)

        path = previous[dest] + [dest]
        path_distance = distance[dest]
        if path_distance == float('inf'):
            print('No available path')
            return path_distance
        print(f"The shortest path between {source} and {dest} is {path} with a distance of {path_distance}")
        return path

Graph.test_path()


#References:
#1. https://algotree.org/algorithms/single_source_shortest_path/dijkstras_shortest_path_python/
