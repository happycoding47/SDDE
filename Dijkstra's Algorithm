from collections import defaultdict

class Graph:
    def __init__(self):
        self.adjlist = defaultdict(list)
        self.weights = {}

    @staticmethod
    def test_path():
        g = Graph()
        g.add_edge('CA', 'NY', 17)
        g.add_edge('CA', 'TX', 10)
        g.add_edge('CA', 'IL', 8)
        g.add_edge('CA', 'OH', 7)
        g.add_edge('NY', 'TX', 8)
        g.add_edge('NY', 'OK', 7)
        g.add_edge('TX', 'OK', 2)
        g.add_edge('TX', 'MN', 5)
        g.add_edge('IL', 'WI', 2)
        g.add_edge('OK', 'MO', 3)
        g.add_edge('MO', 'MN', 5)
        assert g.shortestPath("CA", "MO") == ['CA', 'TX', 'OK', 'MO'], "Invalid path"
        assert g.shortestPath("NY", "MN") == ['NY', 'TX', 'MN'], "Invalid path"


    def add_edge(self, v1, v2, weight):
        self.adjlist[v1].append(v2)
        self.weights[(v1, v2)] = weight

    def shortestPath(self, source, dest):
        path = {source: (None, 0)}  # path stores the nodes for the shortest path. vertice: (previous vertice, distance to source)
        currNode = source
        visited = []

        while currNode != dest:
            visited.append(currNode)
            dist_to_curr = path[currNode][1]

            for neighbor in self.adjlist[currNode]:
                dist_to_source = self.weights[(currNode, neighbor)] + dist_to_curr
                if neighbor not in path:
                    path[neighbor] = (currNode, dist_to_source)

                else:
                    if path[neighbor][1] > dist_to_source:
                        path[neighbor] = (currNode, dist_to_source)

            next_nodes = {node: path[node] for node in path if node not in visited}
            currNode = min(next_nodes, key=lambda k: next_nodes[k][1])

        path_distance = path[currNode][1]
        shortest = []
        while currNode:
            shortest.append(currNode)
            previous = path[currNode][0]
            currNode = previous

        print(f"The shortest path between {source} and {dest} is {shortest[::-1]} with a distance of {path_distance}")
        return shortest[::-1]


Graph.test_path()

